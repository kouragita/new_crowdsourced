import React, { useEffect, useState } from "react";
import { Link, useNavigate } from "react-router-dom";
import { motion, useInView } from "framer-motion";           
import { useInView as useInViewObserver } from "react-intersection-observer";
import axios from "axios";
import toast from "react-hot-toast";
import {
  FaUsers,
  FaGraduationCap,
  FaChartLine,
  FaLightbulb,
  FaHandshake,
  FaPalette,
  FaRocket,
  FaArrowRight,
  FaStar,
  FaTrophy,
  FaMedal,
  FaAward,
  FaEye,
  FaEyeSlash
} from "react-icons/fa";

const Homepage = () => {
  const [topLearners, setTopLearners] = useState([]);
  const [loading, setLoading] = useState(true);
  const [showHiddenLearners, setShowHiddenLearners] = useState(false);
  const navigate = useNavigate();

  // Intersection observer for animations
  const [heroRef, heroInView] = useInView({ threshold: 0.1 });
  const [featuresRef, featuresInView] = useInView({ threshold: 0.1 });
  const [leaderboardRef, leaderboardInView] = useInView({ threshold: 0.1 });
  const [testimonialsRef, testimonialsInView] = useInView({ threshold: 0.1 });

  useEffect(() => {
    fetchTopLearners();
  }, []);

  const fetchTopLearners = async () => {
    try {
      const response = await axios.get("https://e-learn-ncux.onrender.com/api/leaderboard");
      if (Array.isArray(response.data.leaderboard)) {
        setTopLearners(response.data.leaderboard);
      } else {
        console.error("API did not return leaderboard data", response.data);
        toast.error("Failed to load leaderboard data");
      }
    } catch (err) {
      console.error("Error fetching leaderboard data", err);
      toast.error("Failed to load leaderboard data");
    } finally {
      setLoading(false);
    }
  };

  const handleViewMoreClick = () => {
    const token = localStorage.getItem('authToken');
    
    if (!token) {
      toast.error('Please log in to view the full leaderboard');
      navigate('/login', { state: { from: '/dashboard/leaderboard' } });
      return;
    }
    
    navigate('/dashboard/leaderboard');
  };

  const scrollToSection = (sectionId) => {
    const element = document.querySelector(sectionId);
    if (element) {
      element.scrollIntoView({ behavior: 'smooth' });
    }
  };

  // Enhanced features data
  const features = [
    {
      icon: FaUsers,
      title: "User-Friendly",
      description: "Intuitive and easy-to-navigate platform for all users.",
      color: "from-blue-500 to-blue-700",
      bgColor: "bg-blue-50",
      stats: "99% User Satisfaction"
    },
    {
      icon: FaHandshake,
      title: "Collaboration",
      description: "Foster teamwork with collaborative tools and features.",
      color: "from-green-500 to-green-700",
      bgColor: "bg-green-50",
      stats: "1000+ Study Groups"
    },
    {
      icon: FaPalette,
      title: "Customizable",
      description: "Tailor the platform to meet your unique learning needs.",
      color: "from-purple-500 to-purple-700",
      bgColor: "bg-purple-50",
      stats: "50+ Customizations"
    }
  ];

  // Enhanced testimonials with more details
  const testimonials = [
    {
      name: "John Kamau",
      role: "Software Developer",
      avatar: "/api/placeholder/64/64",
      rating: 5,
      text: "CrowdSourced transformed the way I approach learning. The interactive features and community support made my coding journey incredibly smooth.",
      course: "Web Development"
    },
    {
      name: "Jane Smith",
      role: "Project Manager",
      avatar: "/api/placeholder/64/64",
      rating: 5,
      text: "Our team collaboration improved significantly! The platform's tools helped us coordinate our learning goals effectively.",
      course: "Digital Marketing"
    },
    {
      name: "Alex Johnson",
      role: "Designer",
      avatar: "/api/placeholder/64/64",
      rating: 5,
      text: "An essential platform for modern education. The customizable interface perfectly fits my creative workflow.",
      course: "UI/UX Design"
    }
  ];

  // Badge colors mapping
  const getBadgeColor = (badge) => {
    const colors = {
      'Legend': 'text-yellow-600 bg-yellow-100',
      'Master': 'text-blue-600 bg-blue-100',
      'Expert': 'text-purple-600 bg-purple-100',
      'Advanced': 'text-green-600 bg-green-100',
      'Intermediate': 'text-orange-600 bg-orange-100',
      'Beginner': 'text-gray-600 bg-gray-100'
    };
    return colors[badge] || 'text-gray-600 bg-gray-100';
  };

  const getBadgeIcon = (badge) => {
    const icons = {
      'Legend': FaTrophy,
      'Master': FaMedal,
      'Expert': FaAward,
      'Advanced': FaStar,
      'Intermediate': FaGraduationCap,
      'Beginner': FaLightbulb
    };
    return icons[badge] || FaStar;
  };

  return (
    <div className="bg-gray-50 text-gray-800 overflow-hidden">
      {/* Hero Section */}
      <section ref={heroRef} className="relative bg-gradient-to-br from-blue-600 via-purple-600 to-blue-800 py-20 lg:py-32 overflow-hidden">
        {/* Animated background elements */}
        <div className="absolute inset-0 opacity-10">
          <div className="absolute top-10 left-10 w-32 h-32 bg-white rounded-full animate-pulse"></div>
          <div className="absolute top-32 right-20 w-24 h-24 bg-white rounded-full animate-pulse delay-1000"></div>
          <div className="absolute bottom-20 left-1/4 w-16 h-16 bg-white rounded-full animate-pulse delay-500"></div>
          <div className="absolute bottom-32 right-1/3 w-20 h-20 bg-white rounded-full animate-pulse delay-1500"></div>
        </div>

        <div className="container mx-auto px-4 sm:px-6 lg:px-8 text-center relative z-10">
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={heroInView ? { opacity: 1, y: 0 } : {}}
            transition={{ duration: 0.8 }}
          >
            <h1 className="text-4xl sm:text-5xl lg:text-7xl font-bold text-white leading-tight">
              Unlock Your{" "}
              <span className="bg-gradient-to-r from-yellow-400 to-orange-500 bg-clip-text text-transparent">
                Learning Potential
              </span>
            </h1>
            <p className="mt-6 text-lg sm:text-xl lg:text-2xl text-blue-100 max-w-3xl mx-auto leading-relaxed">
              Empower yourself with our easy-to-use learning platform designed for
              students, teachers, and institutions worldwide.
            </p>
          </motion.div>

          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={heroInView ? { opacity: 1, y: 0 } : {}}
            transition={{ duration: 0.8, delay: 0.3 }}
            className="mt-10 flex flex-col sm:flex-row gap-4 justify-center items-center"
          >
            <Link
              to="/signup"
              className="group bg-gradient-to-r from-yellow-400 to-orange-500 text-gray-900 px-8 py-4 rounded-full text-lg font-semibold shadow-2xl hover:shadow-3xl transform hover:scale-105 transition-all duration-300 flex items-center space-x-2"
            >
              <FaRocket className="w-5 h-5" />
              <span>Get Started Free</span>
              <FaArrowRight className="w-4 h-4 group-hover:translate-x-1 transition-transform" />
            </Link>
            
            <button
              onClick={() => scrollToSection('#features')}
              className="border-2 border-white text-white px-8 py-4 rounded-full text-lg font-semibold hover:bg-white hover:text-blue-600 transition-all duration-300"
            >
              Learn More
            </button>
          </motion.div>

          {/* Stats */}
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={heroInView ? { opacity: 1, y: 0 } : {}}
            transition={{ duration: 0.8, delay: 0.6 }}
            className="mt-16 grid grid-cols-1 sm:grid-cols-3 gap-8 max-w-2xl mx-auto"
          >
            {[
              { number: "10K+", label: "Active Learners" },
              { number: "500+", label: "Courses Available" },
              { number: "95%", label: "Success Rate" }
            ].map((stat, index) => (
              <div key={index} className="text-center">
                <div className="text-3xl lg:text-4xl font-bold text-white">{stat.number}</div>
                <div className="text-blue-200 mt-1">{stat.label}</div>
              </div>
            ))}
          </motion.div>
        </div>
      </section>

      {/* Features Section */}
      <section id="features" ref={featuresRef} className="py-20 lg:py-32 bg-white">
        <div className="container mx-auto px-4 sm:px-6 lg:px-8">
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={featuresInView ? { opacity: 1, y: 0 } : {}}
            transition={{ duration: 0.8 }}
            className="text-center mb-16"
          >
            <h2 className="text-3xl lg:text-5xl font-bold text-gray-800 mb-4">
              Why Choose{" "}
              <span className="bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                CrowdSourced?
              </span>
            </h2>
            <p className="text-lg text-gray-600 max-w-2xl mx-auto">
              Discover the features that make our platform the best choice for your learning journey
            </p>
          </motion.div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-8 lg:gap-12">
            {features.map((feature, index) => (
              <motion.div
                key={index}
                initial={{ opacity: 0, y: 30 }}
                animate={featuresInView ? { opacity: 1, y: 0 } : {}}
                transition={{ duration: 0.8, delay: index * 0.2 }}
                whileHover={{ scale: 1.05, y: -10 }}
                className={`${feature.bgColor} p-8 rounded-2xl text-center shadow-lg hover:shadow-2xl transition-all duration-300 border border-gray-100`}
              >
                <div className={`w-16 h-16 mx-auto mb-6 rounded-full bg-gradient-to-r ${feature.color} flex items-center justify-center`}>
                  <feature.icon className="w-8 h-8 text-white" />
                </div>
                <h3 className="text-xl lg:text-2xl font-bold text-gray-800 mb-4">{feature.title}</h3>
                <p className="text-gray-600 mb-4 leading-relaxed">{feature.description}</p>
                <div className="text-sm font-semibold text-blue-600">{feature.stats}</div>
              </motion.div>
            ))}
          </div>
        </div>
      </section>

      {/* Enhanced Leaderboard Section */}
      <section id="leaderboard" ref={leaderboardRef} className="py-20 lg:py-32 bg-gradient-to-br from-gray-50 to-blue-50 relative">
        <div className="container mx-auto px-4 sm:px-6 lg:px-8">
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={leaderboardInView ? { opacity: 1, y: 0 } : {}}
            transition={{ duration: 0.8 }}
            className="text-center mb-16"
          >
            <h2 className="text-3xl lg:text-5xl font-bold text-gray-800 mb-4">
              🏆 Top Learners
            </h2>
            <p className="text-lg text-gray-600 max-w-2xl mx-auto">
              Meet our community of exceptional learners who are leading the way
            </p>
          </motion.div>

          {loading ? (
            <div className="flex justify-center items-center py-20">
              <div className="relative">
                <div className="w-16 h-16 border-4 border-blue-200 border-t-blue-600 rounded-full animate-spin"></div>
                <div className="absolute top-2 left-2 w-12 h-12 border-4 border-purple-200 border-t-purple-600 rounded-full animate-spin"></div>
              </div>
              <p className="ml-6 text-blue-600 font-semibold text-lg">Fetching leaderboard...</p>
            </div>
          ) : (
            <>
              {/* Top 3 Learners - Special Display */}
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6 lg:gap-8 mb-12">
                {topLearners.slice(0, 3).map((learner, index) => {
                  const positions = ['2nd', '1st', '3rd'];
                  const colors = ['from-gray-400 to-gray-600', 'from-yellow-400 to-yellow-600', 'from-orange-400 to-orange-600'];
                  const BadgeIcon = getBadgeIcon(learner.badges[0]);
                  
                  return (
                    <motion.div
                      key={index}
                      initial={{ opacity: 0, y: 30, scale: 0.9 }}
                      animate={leaderboardInView ? { opacity: 1, y: 0, scale: 1 } : {}}
                      transition={{ duration: 0.8, delay: index * 0.2 }}
                      whileHover={{ scale: 1.05 }}
                      className={`bg-white p-6 lg:p-8 rounded-2xl shadow-xl hover:shadow-2xl transition-all duration-300 text-center relative overflow-hidden ${index === 1 ? 'md:order-first md:scale-110 md:z-10' : ''}`}
                    >
                      {/* Background decoration */}
                      <div className={`absolute top-0 left-0 w-full h-2 bg-gradient-to-r ${colors[index]}`}></div>
                      
                      {/* Position badge */}
                      <div className={`absolute top-4 right-4 w-8 h-8 rounded-full bg-gradient-to-r ${colors[index]} flex items-center justify-center`}>
                        <span className="text-white font-bold text-sm">{index + 1}</span>
                      </div>

                      {/* Avatar */}
                      <div className={`w-20 h-20 mx-auto mb-4 rounded-full bg-gradient-to-r ${colors[index]} flex items-center justify-center`}>
                        <span className="text-white font-bold text-2xl">
                          {learner.username.charAt(0).toUpperCase()}
                        </span>
                      </div>

                      <h4 className="font-bold text-gray-800 text-lg lg:text-xl mb-2">{learner.username}</h4>
                      <p className="text-2xl lg:text-3xl font-bold text-blue-600 mb-3">{learner.total_points} pts</p>
                      
                      {learner.badges.length > 0 && (
                        <div className="flex flex-wrap justify-center gap-2">
                          {learner.badges.slice(0, 2).map((badge, badgeIndex) => (
                            <span
                              key={badgeIndex}
                              className={`inline-flex items-center space-x-1 px-3 py-1 rounded-full text-xs font-semibold ${getBadgeColor(badge)}`}
                            >
                              <BadgeIcon className="w-3 h-3" />
                              <span>{badge}</span>
                            </span>
                          ))}
                        </div>
                      )}
                    </motion.div>
                  );
                })}
              </div>

              {/* Remaining Learners */}
              {topLearners.length > 3 && (
                <motion.div
                  initial={{ opacity: 0, y: 30 }}
                  animate={leaderboardInView ? { opacity: 1, y: 0 } : {}}
                  transition={{ duration: 0.8, delay: 0.6 }}
                >
                  {/* Toggle Button */}
                  <div className="text-center mb-8">
                    <button
                      onClick={() => setShowHiddenLearners(!showHiddenLearners)}
                      className="inline-flex items-center space-x-2 px-6 py-3 bg-gray-100 hover:bg-gray-200 rounded-full transition-colors duration-200 text-gray-700"
                    >
                      {showHiddenLearners ? <FaEyeSlash className="w-4 h-4" /> : <FaEye className="w-4 h-4" />}
                      <span>{showHiddenLearners ? 'Hide' : 'Show'} More Learners</span>
                    </button>
                  </div>

                  {/* Hidden/Shown Learners */}
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    {topLearners.slice(3).map((learner, index) => (
                      <motion.div
                        key={index + 3}
                        initial={{ opacity: 0, scale: 0.9 }}
                        animate={{ opacity: showHiddenLearners ? 1 : 0.5, scale: showHiddenLearners ? 1 : 0.95 }}
                        transition={{ duration: 0.3 }}
                        className={`bg-white p-6 rounded-xl shadow-lg text-center transition-all duration-300 ${
                          showHiddenLearners 
                            ? 'hover:shadow-xl cursor-default' 
                            : 'filter blur-sm cursor-not-allowed'
                        }`}
                      >
                        <div className="w-12 h-12 mx-auto mb-3 rounded-full bg-gradient-to-r from-gray-400 to-gray-600 flex items-center justify-center">
                          <span className="text-white font-bold">
                            {showHiddenLearners ? learner.username.charAt(0).toUpperCase() : '?'}
                          </span>
                        </div>
                        
                        <h4 className="font-bold text-gray-800 mb-1">
                          {showHiddenLearners ? learner.username : 'Hidden User'}
                        </h4>
                        <p className="text-gray-600">
                          {showHiddenLearners ? `${learner.total_points} points` : 'Points: ***'}
                        </p>
                        
                        {showHiddenLearners && learner.badges.length > 0 && (
                          <div className="mt-2">
                            <span className={`inline-block px-2 py-1 rounded text-xs ${getBadgeColor(learner.badges[0])}`}>
                              {learner.badges[0]}
                            </span>
                          </div>
                        )}
                      </motion.div>
                    ))}
                  </div>
                </motion.div>
              )}
            </>
          )}

          {/* View More Button */}
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={leaderboardInView ? { opacity: 1, y: 0 } : {}}
            transition={{ duration: 0.8, delay: 0.8 }}
            className="text-center mt-12"
          >
            <button
              onClick={handleViewMoreClick}
              className="group bg-gradient-to-r from-blue-600 to-purple-600 text-white px-8 py-4 rounded-full text-lg font-semibold shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300 flex items-center space-x-2 mx-auto"
            >
              <FaTrophy className="w-5 h-5" />
              <span>View Full Leaderboard</span>
              <FaArrowRight className="w-4 h-4 group-hover:translate-x-1 transition-transform" />
            </button>
          </motion.div>
        </div>
      </section>

      {/* Enhanced Testimonials Section */}
      <section id="testimonials" ref={testimonialsRef} className="py-20 lg:py-32 bg-white">
        <div className="container mx-auto px-4 sm:px-6 lg:px-8">
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={testimonialsInView ? { opacity: 1, y: 0 } : {}}
            transition={{ duration: 0.8 }}
            className="text-center mb-16"
          >
            <h2 className="text-3xl lg:text-5xl font-bold text-gray-800 mb-4">
              What Our{" "}
              <span className="bg-gradient-to-r from-green-600 to-blue-600 bg-clip-text text-transparent">
                Community Says
              </span>
            </h2>
            <p className="text-lg text-gray-600 max-w-2xl mx-auto">
              Real stories from real learners who transformed their careers with CrowdSourced
            </p>
          </motion.div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {testimonials.map((testimonial, index) => (
              <motion.div
                key={index}
                initial={{ opacity: 0, y: 30 }}
                animate={testimonialsInView ? { opacity: 1, y: 0 } : {}}
                transition={{ duration: 0.8, delay: index * 0.2 }}
                whileHover={{ scale: 1.05, y: -5 }}
                className="bg-gradient-to-br from-white to-gray-50 p-6 lg:p-8 rounded-2xl shadow-lg hover:shadow-2xl transition-all duration-300 border border-gray-100"
              >
                {/* Rating */}
                <div className="flex mb-4">
                  {[...Array(testimonial.rating)].map((_, i) => (
                    <FaStar key={i} className="w-5 h-5 text-yellow-400" />
                  ))}
                </div>

                {/* Quote */}
                <p className="text-gray-700 italic mb-6 leading-relaxed">
                  "{testimonial.text}"
                </p>

                {/* Author */}
                <div className="flex items-center">
                  <div className="w-12 h-12 bg-gradient-to-r from-blue-400 to-purple-500 rounded-full flex items-center justify-center">
                    <span className="text-white font-bold">
                      {testimonial.name.charAt(0)}
                    </span>
                  </div>
                  <div className="ml-4">
                    <h4 className="font-bold text-gray-800">{testimonial.name}</h4>
                    <p className="text-sm text-gray-600">{testimonial.role}</p>
                    <p className="text-xs text-blue-600 font-medium">{testimonial.course}</p>
                  </div>
                </div>
              </motion.div>
            ))}
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-20 lg:py-32 bg-gradient-to-r from-blue-600 to-purple-700">
        <div className="container mx-auto px-4 sm:px-6 lg:px-8 text-center">
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            viewport={{ once: true }}
          >
            <h2 className="text-3xl lg:text-5xl font-bold text-white mb-6">
              Ready to Start Your Learning Journey?
            </h2>
            <p className="text-lg lg:text-xl text-blue-100 mb-8 max-w-2xl mx-auto">
              Join thousands of learners who are already transforming their careers with CrowdSourced
            </p>
            <Link
              to="/signup"
              className="inline-flex items-center space-x-2 bg-white text-blue-600 px-8 py-4 rounded-full text-lg font-semibold shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300"
            >
              <FaRocket className="w-5 h-5" />
              <span>Get Started Today</span>
              <FaArrowRight className="w-4 h-4" />
            </Link>
          </motion.div>
        </div>
      </section>
    </div>
  );
};

export default Homepage;